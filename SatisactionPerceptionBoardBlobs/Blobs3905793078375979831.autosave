// snapshot of board with characters (e.g. GausseSense with GausseBits) into ArrayCurrentState
// compare the snapshot with ArrayHistoryState
// Prevent movement on small instability of GausseSense: If change is within 5.0px then no change otherwise add new state to ArrayHistoryState
// Create dataset/Array of movements of Bits on the Sense
// Create improvement of data exchange over client/server
  
  ArrayList<GData> currentGaussBitsList = gsMeta.getBasicGaussBits(thld);
  ArrayList<GData> historyGaussBitsList = gsMeta.getBasicGaussBits(thld);

  for (int i=0; i<currentGaussBitsList.size(); i++) {
    GData currentGaussBits = currentGaussBitsList.get(i);
    printPointData(currentGaussBits, i);
    printArray(currentGaussBits);
    //sendPointData(historyGaussBits, i);
    //ellipseMode(CENTER);
  }
  

  // There are no blobs!
  if (blobs.isEmpty() && currentBlobs.size() > 0) {
    println("Adding blobs!");
    for (Blob b : currentBlobs) {
      b.id = blobCounter;
      blobs.add(b);
      blobCounter++;
    }
  } else if (blobs.size() <= currentBlobs.size()) {
    // Match whatever blobs you can match
    for (Blob b : blobs) {
      float recordD = 1000;
      Blob matched = null;
      for (Blob cb : currentBlobs) {
        PVector centerB = b.getCenter();
        PVector centerCB = cb.getCenter();         
        float d = PVector.dist(centerB, centerCB);
        if (d < recordD && !cb.taken) {
          recordD = d; 
          matched = cb;
        }
      }
      matched.taken = true;
      b.become(matched);
    }

    // Whatever is leftover make new blobs
    for (Blob b : currentBlobs) {
      if (!b.taken) {
        b.id = blobCounter;
        blobs.add(b);
        blobCounter++;
      }
    }
  } else if (blobs.size() > currentBlobs.size()) {
    for (Blob b : blobs) {
      b.taken = false;
    }


    // Match whatever blobs you can match
    for (Blob cb : currentBlobs) {
      float recordD = 1000;
      Blob matched = null;
      for (Blob b : blobs) {
        PVector centerB = b.getCenter();
        PVector centerCB = cb.getCenter();         
        float d = PVector.dist(centerB, centerCB);
        if (d < recordD && !b.taken) {
          recordD = d; 
          matched = b;
        }
      }
      if (matched != null) {
        matched.taken = true;
        matched.become(cb);
      }
    }

    for (int i = blobs.size() - 1; i >= 0; i--) {
      Blob b = blobs.get(i);
      if (!b.taken) {
        blobs.remove(i);
      }
    }
  }

  for (Blob b : blobs) {
    b.show();
  } 
