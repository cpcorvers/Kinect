/********************
 * IMPORT
 *******************/
import processing.serial.*;
import gausstoys.core.*;
import websockets.*;
import processing.net.*;

/********************
 * INIT
 *******************/
GaussSense gsMeta;
GaussSense[] gs = new GaussSense[2];
boolean showContour = false;
boolean testBoard = false;
int thld = 6 ; //Unit: Gauss
boolean horizontalGrid = true;

// background images
PImage playingfield;
String[] bgBoard = {"playingfield1.png", "playingfield2.png", "playingfield3.png", "playingfield4.png" };
int bgBoardIndex = 0;

PImage perspectives;
String[] bgScreen = {"perspective1.png",  "perspective3.png", "perspective4.png", "perspective5.png", "perspective6.png", "perspective7.png" };
int bgScreenIndex = 0;
PImage person_abstract;

// INIT SECOND SCREEN / SERVER CLIENT
Server s;
Client c;
String input;
String newInput;
int data[];
int port = 3030;

// INIT 'databases'
Person p;
ArrayList<Person> boardPawns;
ArrayList<Person> screenPersons;
ArrayList<Person> historyPersons;

float scaleX = 1.4900; //1.373 //width of screen
float scaleY = 1.550; //1.350 //hight of screen
float offsetX = 10; // 76;
float offsetY = 10; // 65;

JSONArray pawnsOnDigiboard;
JSONObject pawn;
int recordArray = 0;

//INIT Display variables
int boardDisplayWidth = 1920;
int boardDisplayHeight = 1080;
int screenDisplayWidth = 1280;
int screenDisplayHeight = 800;
int screen = 0;

void settings() {
  fullScreen(P2D, 3);
}


/********************
 * SETUP FUNCTION
 *******************/
void setup() {
  // START THE SERVER
  s = new Server(this, port); // Start a simple server on a port
  // fullScreen(P2D, SPAN);
  // size(1920, 1080, P2D);
  frameRate(20);
  playingfield = loadImage(bgBoard[bgBoardIndex]);

  // List all serial ports
  // GaussSense.printSerialPortList();

  //Initialize the GaussSense
  for (int i = 0; i < 2; i ++) {
    gs[i] = new GaussSense(this, GaussSense.GSType.GAUSSSENSE_BASIC, Serial.list()[Serial.list().length - (i+1)], 115200);
    gs[i].setCalibrationFileName("BASIC-"+i+".data");
  }
  gsMeta = new GaussSense(this, GaussSense.GSType.GAUSSSENSE_BASIC, 2, 1);

  // Intitialize the arrays for pawns and persons
  boardPawns = new ArrayList<Person>();
  screenPersons = new ArrayList<Person>();
  historyPersons = new ArrayList<Person>();

  pawnsOnDigiboard = new JSONArray();
  // pawn = new JSONObject();

  perspectives = loadImage(bgScreen[bgScreenIndex]);
  person_abstract = loadImage("27.png");

  println("Setup complete");
  println("display: " + displayWidth + "," + displayHeight);
}

/********************
 * DRAW FUNCTION
 *******************/
void draw() {
  background(250);

  // create boardvisual on the boardscreen with keypress to switch images
  pushMatrix();
  translate(boardDisplayWidth, 0);
  rotate (PI/2);
  // image(playingfield, 0,  0, displayHeight, displayWidth );
  image(playingfield, 0,  0, displayHeight, displayWidth );
  popMatrix();

  //Set variables for drawing single-layer contour map
  //Try to change the Thld to see the results
  int upsampleFactor = 5;

  for (int i = 0; i < 2; i ++) {
    if (gs[i].getAdditionalData().size()>0) {
      int s = gs[i].getAdditionalData().get(0);
      //println(s);
      if (s == '1') gsMeta.set(gs[i], 0, 0, 2, false, false);
      if (s == '2') gsMeta.set(gs[i], 1, 0, 2, false, false);
    }
  }

  // show visuals as generated by the GaussSense product and software if showContour == true in INIT
  pushMatrix();
    translate(offsetX, offsetY);
    scale(scaleX, scaleY);
    if (showContour) {
      //Set and draw the upsampled contour map
       gsMeta.drawUpsampledContourMap2D(1280, 640, upsampleFactor, thld);
    } else {
      //Set but don't draw the upsampled contour map
      gsMeta.setUpsampledContourMap2D(1280, 640, upsampleFactor, thld);
    }
    // gsMeta.drawBasicGaussBits(); //draw a circle around the sensed magnets
  popMatrix();

  //receive data from GaussSense, create Person in Arraylists and add Person.parameters using class Person
  getGaussData();

  //visualise a pawn on the boardscreen and send Person.parameters to the clients
  dataVisualisation();

  // println(boardPawns.size() + " " + screenPersons.size() + " " + historyPersons.size());

  // DISPLAY on screen
  // pushMatrix();
  // image(perspectives, displayWidth/2, displayHeight/2, screenDisplayWidth, screenDisplayHeight);
  //
  // if (boardPawns.size() > 0){
  //   for (Person p : boardPawns){
  //     p.showPerson(p.pawnCenterX, p.pawnCenterY, p.identity, p.direction);
  //     // p.showPawn();
  //   }}
  //
  // // image(person_abstract, x, y, 50, 100);
  //
  // popMatrix();
  // Play with JSON instead of Arraylists for interaction with clients.
  //make a JSON object of all items in boardPawns and add to JSON Array
  // createJSON();
  // println(pawn);
  // for (int i = 0; i < boardPawns.size(); i++) {
  //
  //   Person cp = boardPawns.get(i);
  //   // boardPawns.remove(i);
  //   Float cc = (str)cp;
  //   println(cp);
  // }

  // fill(250,0,0);
  // rect(900, 500, 100, 100);
}

void createJSON() {
  // show every person which is taken==true
  pawn = new JSONObject();
  for (Person p : historyPersons) {
    if (p.takenJSON == false) {
      p.getPawnCenter();
      p.becomeJSONObject();
      };
      p.takenJSON = true;
    }
  if (pawn != null){
    pawnsOnDigiboard.setJSONObject(recordArray, pawn);
    recordArray++;
    pawn = null;
  }
}

void dataVisualisation() {
  // show every person which is taken==true
  for (Person p : boardPawns) {
    if ( p.pawn_polarity == 1) { //p.taken == true &&
      p.getPawnCenter();
      p.showPawn(p.pawnCenterX, p.pawnCenterY, p.identity, p.direction);
    // } else if ( p.pawn_polarity == 0) {
    //   p.getPawnCenter();
    //   p.showPawn(p.pawnCenterX, p.pawnCenterY, p.identity, p.direction);
    }
  }
}

void getGaussData() {
  //Receive data from the GaussSense sensors and store in an Arraylist
  ArrayList<GData> bGaussBitsList = gsMeta.getBasicGaussBits(thld);//API Demos
  for (int j=0; j < bGaussBitsList.size(); j++) {
    GData bGaussBits = bGaussBitsList.get(j);
    int polarity = bGaussBits.getPolarity(); //Get the polarity in Int. 0: North, 1:South
    int intensity = (int) bGaussBits.getIntensity(); //Get the intensity. Unit: gauss
    int x = round((int) bGaussBits.getX()); //Get the X coordinate on the display
    int y = round((int) bGaussBits.getY()); //Get the Y coordinate on the display
    // String polarityString = (polarity==0 ? "North" : "South" );
    int xx = round(((int) x * scaleX));
    int yy = round(((int) y * scaleY));
    // store data in the ArrayList boardPawns every .. millisecond
    // for (int i = 0; i <= 100; i++){
    //   if (i == 100) {
        boardPawns.add(new Person(xx, yy, polarity, intensity));
        historyPersons.add(new Person(xx, yy, polarity, intensity));
    //   }
        println("getData added: " + boardPawns);
    // }

    // if the ArrayList boardPawns is bigger then the sensorlist,
    if (boardPawns.size() > bGaussBitsList.size()) {
      // then move the pawn record to historyPersons
      for (int i = 0; i < (boardPawns.size() - bGaussBitsList.size()); i++){
        Person hp = boardPawns.get(i);
        // historyPersons.add(hp);
        boardPawns.remove(i);
      }


    };

// send the GaussSense data to the clients
    // if (intensity>0) s.write( j + " " + polarity+ " " + intensity + " " + x + " " + y +  " " + xx + " " + yy + "\n" );
  }
  // Empty ArrayList boardPawns when sensors give no data
  if (bGaussBitsList.size() == 0){ emptyBoardPawns(); }
  // Avoiding full of memory exeption by restricting the size of the ArrayLists
  if (boardPawns.size() > 200) {
    for (int i = 0; i < (boardPawns.size() - 200); i++){ boardPawns.remove(i); }
  }
  if (screenPersons.size() > 200) {
    for (int i = 0; i < (screenPersons.size() - 200); i++){ screenPersons.remove(i); }
  }
  if (historyPersons.size() > 200) {
    for (int i = 0; i < (historyPersons.size() - 200); i++){ historyPersons.remove(i); }
  }
}

void emptyBoardPawns(){
  for (int i = 0; i < boardPawns.size(); i++) {
    Person cp = boardPawns.get(i);
    boardPawns.remove(i);
  }
}

void keyPressed() {
  //CHANGING PLAYINGFIELD BACKGROUND WITH Q AND W KEYPRESS
  if (key == 'q') {
    if (bgBoardIndex > 0) {
      bgBoardIndex-- ;
    } else {
      bgBoardIndex = bgBoard.length-1;
    }
    playingfield = loadImage(bgBoard[bgBoardIndex]);
  } else if (key == 'w') {
    if (bgBoardIndex < (bgBoard.length-1)) {
      bgBoardIndex++ ;
    } else {
      bgBoardIndex = 0;
    }
    playingfield = loadImage(bgBoard[bgBoardIndex]);
  } else if (key == 'n') {
    println(pawnsOnDigiboard);

  }

}



/*
if (pawn == null) {
    println("JSONObject could not be parsed");
  } else {
    int i;
    if (pawnsOnDigiboard.size() > 0) {
      i = 0;
    } else { i = (pawnsOnDigiboard.size() + 1);}

    // println(pawnsOnDigiboard.size());
    pawnsOnDigiboard.setJSONObject(i, pawn);

    println(pawnsOnDigiboard);
    // println("size: " + pawnsOnDigiboard.size());

  }
  String data = pawn.toString();
  s.write( data );



  */
